"""
Django settings for acadegrade project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from django.conf import settings
from decouple import config
import os


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-jq(!^$j0-2mm27#&g8m7v9av2bc=lpgovk#iw+qlgqh6*lwd(#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'acadegradecore',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'acadegrade.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'acadegrade.settings.firebase_config',
            ],
        },
    },
]

WSGI_APPLICATION = 'acadegrade.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Email Configuration
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = config("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# firebase integration
def firebase_config(request):
    return {
        "FIREBASE_API_KEY": os.getenv("FIREBASE_API_KEY"),
        "FIREBASE_AUTH_DOMAIN": os.getenv("FIREBASE_AUTH_DOMAIN"),
        "FIREBASE_PROJECT_ID": os.getenv("FIREBASE_PROJECT_ID"),
        "FIREBASE_STORAGE_BUCKET": os.getenv("FIREBASE_STORAGE_BUCKET"),
        "FIREBASE_MESSAGING_SENDER_ID": os.getenv("FIREBASE_MESSAGING_SENDER_ID"),
        "FIREBASE_APP_ID": os.getenv("FIREBASE_APP_ID"),
        "FIREBASE_MEASUREMENT_ID": os.getenv("FIREBASE_MEASUREMENT_ID"),
        "FIREBASE_DATABASE_URL": os.getenv("FIREBASE_DATABASE_URL"),
    }

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# -------------------------------------------------------------------
# üî• Firebase Admin SDK Initialization
# -------------------------------------------------------------------
import json
import firebase_admin
from firebase_admin import credentials

# Only initialize once
if not firebase_admin._apps:
    raw_service_account = config("FIREBASE_SERVICE_ACCOUNT", default=None)
    if raw_service_account:
        try:
            service_account_info = json.loads(raw_service_account)
            cred = credentials.Certificate(service_account_info)
            firebase_admin.initialize_app(cred)
            print("‚úÖ Firebase Admin initialized")
        except Exception as e:
            print("‚ùå Firebase initialization failed:", e)
    else:
        print("‚ö†Ô∏è FIREBASE_SERVICE_ACCOUNT not found in environment")


# -------------------------------------------------------------------
# üî• Firebase Admin SDK Initialization
# -------------------------------------------------------------------
import json
import firebase_admin
from firebase_admin import credentials

FIREBASE_APP = None  # global handle

if not firebase_admin._apps:
    raw_service_account = config("FIREBASE_SERVICE_ACCOUNT", default=None)
    if raw_service_account:
        try:
            service_account_info = json.loads(raw_service_account)
            cred = credentials.Certificate(service_account_info)
            FIREBASE_APP = firebase_admin.initialize_app(cred)
            print("‚úÖ Firebase Admin initialized")
        except Exception as e:
            print("‚ùå Firebase initialization failed:", e)
    else:
        print("‚ö†Ô∏è FIREBASE_SERVICE_ACCOUNT not found in environment")
else:
    FIREBASE_APP = firebase_admin.get_app()
